// Importing the createSlice function from Redux Toolkit
import { createSlice } from '@reduxjs/toolkit';

// Setting the initial state for the "auth" slice using the userInfo from localStorage if available
const initialState = {
  userInfo: localStorage.getItem('userInfo')
    ? JSON.parse(localStorage.getItem('userInfo'))
    : null,
};

// Creating the "authSlice" with createSlice
const authSlice = createSlice({
  // Setting the name of the slice
  name: 'auth',
  // Using the previously defined initialState
  initialState,
  // Defining the reducers for this slice
  reducers: {
    // Reducer to set user credentials
    setCredentials: (state, action) => {
      // Setting the "userInfo" state to the payload received from the action
      state.userInfo = action.payload;
      // Saving the user info in localStorage
      localStorage.setItem('userInfo', JSON.stringify(action.payload));

      // Calculating expiration time for the user session (30 days from now)
      const expirationTime = new Date().getTime() + 30 * 24 * 60 * 60 * 1000; // 30 days
      // Saving the expiration time in localStorage
      localStorage.setItem('expirationTime', expirationTime);
    },
    // Reducer to handle user logout
    logout: (state, action) => {
      // Clearing the "userInfo" state to null
      state.userInfo = null;
      // Clearing the localStorage (including the user info and expiration time)
      localStorage.clear();
    },
  },
});

// Exporting the action creators generated by createSlice
export const { setCredentials, logout } = authSlice.actions;

// Exporting the reducer function generated by createSlice
export default authSlice.reducer;

/*
The code imports the "createSlice" function from Redux Toolkit.
It sets the initial state for the "auth" slice, initializing "userInfo" with data from localStorage or null if not available.
The "authSlice" is created using "createSlice" with a name, initialState, and reducers.
The "setCredentials" reducer updates the "userInfo" state and saves user info and expiration time in localStorage for user authentication.
The "logout" reducer clears the "userInfo" state and removes user-related data from localStorage.
Action creators "setCredentials" and "logout" are generated and exported.
The "authSlice.reducer" is exported as the reducer function to be used in the Redux store.
This code defines a Redux slice responsible for handling user authentication and managing user-related data in the Redux store and localStorage. It allows for setting user credentials and logging out users while keeping the data synchronized between the Redux state and localStorage.
*/